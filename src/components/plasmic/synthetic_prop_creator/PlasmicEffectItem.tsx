// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kh4DHzfPKxHW3t3zk2aoXn
// Component: YlZHMfPSc4

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Select from '../../Select'; // plasmic-import: R93O6qtnoGgKV/component
import IconButton from '../../IconButton'; // plasmic-import: 0Jteo_49Jd/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_synthetic_prop_creator.module.css'; // plasmic-import: kh4DHzfPKxHW3t3zk2aoXn/projectcss
import sty from './PlasmicEffectItem.module.css'; // plasmic-import: YlZHMfPSc4/css

import Icon12Icon from './icons/PlasmicIcon__Icon12'; // plasmic-import: U8cy8CFv-U/icon
import Icon9Icon from './icons/PlasmicIcon__Icon9'; // plasmic-import: -vmCDH9BLC/icon

export type PlasmicEffectItem__VariantMembers = {
  currentDropdown: '_default' | 'left' | 'right';
};

export type PlasmicEffectItem__VariantsArgs = {
  currentDropdown?: SingleChoiceArg<'_default' | 'left' | 'right'>;
};

type VariantPropType = keyof PlasmicEffectItem__VariantsArgs;
export const PlasmicEffectItem__VariantProps = new Array<VariantPropType>('currentDropdown');

export type PlasmicEffectItem__ArgsType = {};
type ArgPropType = keyof PlasmicEffectItem__ArgsType;
export const PlasmicEffectItem__ArgProps = new Array<ArgPropType>();

export type PlasmicEffectItem__OverridesType = {
  root?: p.Flex<'div'>;
  layer?: p.Flex<typeof Select>;
  attribute?: p.Flex<typeof Select>;
  _delete?: p.Flex<typeof IconButton>;
};

export interface DefaultEffectItemProps {
  currentDropdown?: SingleChoiceArg<'_default' | 'left' | 'right'>;
  className?: string;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicEffectItem__RenderFunc(props: {
  variants: PlasmicEffectItem__VariantsArgs;
  args: PlasmicEffectItem__ArgsType;
  overrides: PlasmicEffectItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'layer.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },

      {
        path: 'attribute.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },

      {
        path: 'currentDropdown',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.currentDropdown,
      },

      {
        path: 'layer.open',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },

      {
        path: 'attribute.open',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcurrentDropdown__default]: hasVariant($state, 'currentDropdown', '_default'),
          [sty.rootcurrentDropdown_left]: hasVariant($state, 'currentDropdown', 'left'),
          [sty.rootcurrentDropdown_right]: hasVariant($state, 'currentDropdown', 'right'),
        }
      )}
    >
      {(hasVariant($state, 'currentDropdown', 'right') ? true : true) ? (
        <Select
          data-plasmic-name={'layer'}
          data-plasmic-override={overrides.layer}
          className={classNames('__wab_instance', sty.layer, {
            [sty.layercurrentDropdown__default]: hasVariant($state, 'currentDropdown', '_default'),
            [sty.layercurrentDropdown_left]: hasVariant($state, 'currentDropdown', 'left'),
            [sty.layercurrentDropdown_right]: hasVariant($state, 'currentDropdown', 'right'),
          })}
          onChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ['layer', 'value'])(eventArgs[0]);
          }}
          onOpenChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ['layer', 'open'])(eventArgs[0]);
          }}
          options={[
            { value: 'option1', label: 'Option 1' },
            { value: 'option2', label: 'Option 2' },
          ]}
          value={p.generateStateValueProp($state, ['layer', 'value'])}
        />
      ) : null}
      {(
        hasVariant($state, 'currentDropdown', 'right')
          ? true
          : hasVariant($state, 'currentDropdown', 'left')
          ? true
          : true
      ) ? (
        <Icon12Icon
          className={classNames(projectcss.all, sty.svg__afz, {
            [sty.svgcurrentDropdown_left__afzAsFhk]: hasVariant($state, 'currentDropdown', 'left'),
            [sty.svgcurrentDropdown_right__afzGZWb]: hasVariant($state, 'currentDropdown', 'right'),
          })}
          role={'img'}
        />
      ) : null}
      {(hasVariant($state, 'currentDropdown', 'left') ? true : true) ? (
        <Select
          data-plasmic-name={'attribute'}
          data-plasmic-override={overrides.attribute}
          className={classNames('__wab_instance', sty.attribute, {
            [sty.attributecurrentDropdown_left]: hasVariant($state, 'currentDropdown', 'left'),
            [sty.attributecurrentDropdown_right]: hasVariant($state, 'currentDropdown', 'right'),
          })}
          onChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ['attribute', 'value'])(eventArgs[0]);
          }}
          onOpenChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ['attribute', 'open'])(eventArgs[0]);
          }}
          options={[
            { value: 'option1', label: 'Option 1' },
            { value: 'option2', label: 'Option 2' },
          ]}
          value={p.generateStateValueProp($state, ['attribute', 'value'])}
        />
      ) : null}
      {(
        hasVariant($state, 'currentDropdown', 'right')
          ? true
          : hasVariant($state, 'currentDropdown', 'left')
          ? true
          : true
      ) ? (
        <IconButton
          data-plasmic-name={'_delete'}
          data-plasmic-override={overrides._delete}
          className={classNames('__wab_instance', sty._delete, {
            [sty._deletecurrentDropdown_left]: hasVariant($state, 'currentDropdown', 'left'),
            [sty._deletecurrentDropdown_right]: hasVariant($state, 'currentDropdown', 'right'),
          })}
        >
          <Icon9Icon className={classNames(projectcss.all, sty.svg__k4ZgD)} role={'img'} />
        </IconButton>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'layer', 'attribute', '_delete'],
  layer: ['layer'],
  attribute: ['attribute'],
  _delete: ['_delete'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  layer: typeof Select;
  attribute: typeof Select;
  _delete: typeof IconButton;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicEffectItem__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicEffectItem__VariantsArgs;
  args?: PlasmicEffectItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicEffectItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicEffectItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEffectItem__ArgProps,
          internalVariantPropNames: PlasmicEffectItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicEffectItem__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicEffectItem';
  } else {
    func.displayName = `PlasmicEffectItem.${nodeName}`;
  }
  return func;
}

export const PlasmicEffectItem = Object.assign(
  // Top-level PlasmicEffectItem renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    layer: makeNodeComponent('layer'),
    attribute: makeNodeComponent('attribute'),
    _delete: makeNodeComponent('_delete'),

    // Metadata about props expected for PlasmicEffectItem
    internalVariantProps: PlasmicEffectItem__VariantProps,
    internalArgProps: PlasmicEffectItem__ArgProps,
  }
);

export default PlasmicEffectItem;
/* prettier-ignore-end */
