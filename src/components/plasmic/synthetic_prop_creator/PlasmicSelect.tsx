// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kh4DHzfPKxHW3t3zk2aoXn
// Component: R93O6qtnoGgKV

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import * as pp from '@plasmicapp/react-web';
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Select__Overlay from '../../Select__Overlay'; // plasmic-import: _AWLPzi8y1je2/component
import Select__Option from '../../Select__Option'; // plasmic-import: wfKz4k2V_x8Tz/component
import Select__OptionGroup from '../../Select__OptionGroup'; // plasmic-import: jn3tiZJi2jCL9/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_synthetic_prop_creator.module.css'; // plasmic-import: kh4DHzfPKxHW3t3zk2aoXn/projectcss
import sty from './PlasmicSelect.module.css'; // plasmic-import: R93O6qtnoGgKV/css

import IconIcon from './icons/PlasmicIcon__Icon'; // plasmic-import: FY6SOvu8bSN_A2/icon

export type PlasmicSelect__VariantMembers = {
  showPlaceholder: 'showPlaceholder';
  isOpen: 'isOpen';
  isDisabled: 'isDisabled';
};

export type PlasmicSelect__VariantsArgs = {
  showPlaceholder?: SingleBooleanChoiceArg<'showPlaceholder'>;
  isOpen?: SingleBooleanChoiceArg<'isOpen'>;
  isDisabled?: SingleBooleanChoiceArg<'isDisabled'>;
};

type VariantPropType = keyof PlasmicSelect__VariantsArgs;
export const PlasmicSelect__VariantProps = new Array<VariantPropType>('showPlaceholder', 'isOpen', 'isDisabled');

export type PlasmicSelect__ArgsType = {
  selectedContent?: React.ReactNode;
  placeholder?: React.ReactNode;
  children?: React.ReactNode;
  value?: 'Dynamic options';
  name?: string;
  'aria-label'?: string;
  'aria-labelledby'?: string;
  options?: any;
  onOpenChange?: (val: boolean) => void;
};

type ArgPropType = keyof PlasmicSelect__ArgsType;
export const PlasmicSelect__ArgProps = new Array<ArgPropType>(
  'selectedContent',
  'placeholder',
  'children',
  'value',
  'name',
  'aria-label',
  'aria-labelledby',
  'options',
  'onOpenChange'
);

export type PlasmicSelect__OverridesType = {
  root?: p.Flex<'div'>;
  trigger?: p.Flex<'button'>;
  contentContainer?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  svg?: p.Flex<'svg'>;
  overlay?: p.Flex<typeof Select__Overlay>;
  optionsContainer?: p.Flex<'div'>;
};

export interface DefaultSelectProps extends pp.BaseSelectProps {
  'aria-label'?: string;
  'aria-labelledby'?: string;
  options?: any;
  onOpenChange?: (val: boolean) => void;
}

const PlasmicSelectContext = React.createContext<
  undefined | { variants: PlasmicSelect__VariantsArgs; args: PlasmicSelect__ArgsType }
>(undefined);

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSelect__RenderFunc(props: {
  variants: PlasmicSelect__VariantsArgs;
  args: PlasmicSelect__ArgsType;
  overrides: PlasmicSelect__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'showPlaceholder',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showPlaceholder,
      },

      {
        path: 'isOpen',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen,
      },

      {
        path: 'isDisabled',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled,
      },

      {
        path: 'value',
        type: 'writable',
        variableType: 'text',

        valueProp: 'value',
        onChangeProp: 'onChange',
      },
      {
        path: 'open',
        type: 'readonly',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isOpen;
            } catch (e) {
              if (e instanceof TypeError) {
                return false;
              }
              throw e;
            }
          })(),

        onChangeProp: 'onOpenChange',
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] = useTrigger('useFocusVisibleWithin', {
    isTextInput: false,
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  return (
    <PlasmicSelectContext.Provider value={{ variants, args }}>
      <div
        data-plasmic-name={'root'}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
            [sty.rootisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            [sty.rootshowPlaceholder]: hasVariant($state, 'showPlaceholder', 'showPlaceholder'),
          }
        )}
        data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
      >
        <p.Stack
          as={'button'}
          data-plasmic-name={'trigger'}
          data-plasmic-override={overrides.trigger}
          hasGap={true}
          className={classNames(projectcss.all, projectcss.button, sty.trigger, {
            [sty.trigger___focusVisibleWithin]: triggers.focusVisibleWithin_root,
            [sty.triggerisDisabled]: hasVariant($state, 'isDisabled', 'isDisabled'),
            [sty.triggerisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            [sty.triggershowPlaceholder]: hasVariant($state, 'showPlaceholder', 'showPlaceholder'),
          })}
          disabled={hasVariant($state, 'isDisabled', 'isDisabled') ? true : false}
          ref={(ref) => {
            $refs['trigger'] = ref;
          }}
        >
          <div
            data-plasmic-name={'contentContainer'}
            data-plasmic-override={overrides.contentContainer}
            className={classNames(projectcss.all, sty.contentContainer, {
              [sty.contentContainerisDisabled]: hasVariant($state, 'isDisabled', 'isDisabled'),
              [sty.contentContainershowPlaceholder]: hasVariant($state, 'showPlaceholder', 'showPlaceholder'),
            })}
          >
            {(hasVariant($state, 'showPlaceholder', 'showPlaceholder') ? false : true)
              ? p.renderPlasmicSlot({
                  defaultContents: 'Selected',
                  value: args.selectedContent,
                  className: classNames(sty.slotTargetSelectedContent, {
                    [sty.slotTargetSelectedContentisDisabled]: hasVariant($state, 'isDisabled', 'isDisabled'),
                    [sty.slotTargetSelectedContentisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
                    [sty.slotTargetSelectedContentshowPlaceholder]: hasVariant(
                      $state,
                      'showPlaceholder',
                      'showPlaceholder'
                    ),
                  }),
                })
              : null}
            {(hasVariant($state, 'showPlaceholder', 'showPlaceholder') ? true : false)
              ? p.renderPlasmicSlot({
                  defaultContents: 'Selectâ€¦',
                  value: args.placeholder,
                  className: classNames(sty.slotTargetPlaceholder, {
                    [sty.slotTargetPlaceholderisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
                    [sty.slotTargetPlaceholdershowPlaceholder]: hasVariant(
                      $state,
                      'showPlaceholder',
                      'showPlaceholder'
                    ),
                  }),
                })
              : null}
          </div>
          {true ? (
            <div
              data-plasmic-name={'freeBox'}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <IconIcon
                data-plasmic-name={'svg'}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg, {
                  [sty.svgisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
                })}
                role={'img'}
              />
            </div>
          ) : null}
        </p.Stack>
        {(hasVariant($state, 'isOpen', 'isOpen') ? true : false) ? (
          <Select__Overlay
            data-plasmic-name={'overlay'}
            data-plasmic-override={overrides.overlay}
            className={classNames('__wab_instance', sty.overlay, {
              [sty.overlayisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
            })}
            relativePlacement={'bottom' as const}
          >
            <div
              data-plasmic-name={'optionsContainer'}
              data-plasmic-override={overrides.optionsContainer}
              className={classNames(projectcss.all, sty.optionsContainer, {
                [sty.optionsContainerisOpen]: hasVariant($state, 'isOpen', 'isOpen'),
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <Select__Option
                      className={classNames('__wab_instance', sty.option__u537C)}
                      value={'value1' as const}
                    >
                      {'Option 1'}
                    </Select__Option>
                    <Select__Option
                      className={classNames('__wab_instance', sty.option__eBo70)}
                      value={'value2' as const}
                    >
                      {'Option 2'}
                    </Select__Option>
                  </React.Fragment>
                ),
                value: args.children,
              })}
            </div>
          </Select__Overlay>
        ) : null}
      </div>
    </PlasmicSelectContext.Provider>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseSelectProps>(props: P, ref: pp.SelectRef) {
  if (!('options' in props)) {
    if (!('children' in props)) {
      props = {
        ...props,
        children: (
          <React.Fragment>
            <Select__Option className={classNames('__wab_instance', sty.option__u537C)} value={'value1' as const}>
              {'Option 1'}
            </Select__Option>
            <Select__Option className={classNames('__wab_instance', sty.option__eBo70)} value={'value2' as const}>
              {'Option 2'}
            </Select__Option>
          </React.Fragment>
        ),
      };
    }
  }
  return pp.useSelect(
    PlasmicSelect,
    props,
    {
      ...{
        isOpenVariant: { group: 'isOpen', variant: 'isOpen' },
        placeholderVariant: { group: 'showPlaceholder', variant: 'showPlaceholder' },
        isDisabledVariant: { group: 'isDisabled', variant: 'isDisabled' },
        triggerContentSlot: 'selectedContent',
        optionsSlot: 'children',
        placeholderSlot: 'placeholder',
        root: 'root',
        trigger: 'trigger',
        overlay: 'overlay',
        optionsContainer: 'optionsContainer',
      },
      OptionComponent: Select__Option,
      OptionGroupComponent: Select__OptionGroup,
      itemsProp: 'options',
    },

    ref
  );
}

const PlasmicDescendants = {
  root: ['root', 'trigger', 'contentContainer', 'freeBox', 'svg', 'overlay', 'optionsContainer'],
  trigger: ['trigger', 'contentContainer', 'freeBox', 'svg'],
  contentContainer: ['contentContainer'],
  freeBox: ['freeBox', 'svg'],
  svg: ['svg'],
  overlay: ['overlay', 'optionsContainer'],
  optionsContainer: ['optionsContainer'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  trigger: 'button';
  contentContainer: 'div';
  freeBox: 'div';
  svg: 'svg';
  overlay: typeof Select__Overlay;
  optionsContainer: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicSelect__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSelect__VariantsArgs;
  args?: PlasmicSelect__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSelect__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSelect__ArgProps,
          internalVariantPropNames: PlasmicSelect__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicSelect__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSelect';
  } else {
    func.displayName = `PlasmicSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicSelect = Object.assign(
  // Top-level PlasmicSelect renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    trigger: makeNodeComponent('trigger'),
    contentContainer: makeNodeComponent('contentContainer'),
    freeBox: makeNodeComponent('freeBox'),
    svg: makeNodeComponent('svg'),
    overlay: makeNodeComponent('overlay'),
    optionsContainer: makeNodeComponent('optionsContainer'),

    // Metadata about props expected for PlasmicSelect
    internalVariantProps: PlasmicSelect__VariantProps,
    internalArgProps: PlasmicSelect__ArgProps,

    // Context for sub components
    Context: PlasmicSelectContext,

    useBehavior,
  }
);

export default PlasmicSelect;
/* prettier-ignore-end */
