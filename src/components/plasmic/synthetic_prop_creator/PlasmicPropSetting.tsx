// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kh4DHzfPKxHW3t3zk2aoXn
// Component: 3oECv05maA

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Header from '../../Header'; // plasmic-import: wMxKYxS1oT/component
import IconButton from '../../IconButton'; // plasmic-import: 0Jteo_49Jd/component
import Item from '../../Item'; // plasmic-import: 9gVbaqOElK63Ae/component
import Group from '../../Group'; // plasmic-import: 0gQ3RbV4NzdZ9M/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_synthetic_prop_creator.module.css'; // plasmic-import: kh4DHzfPKxHW3t3zk2aoXn/projectcss
import sty from './PlasmicPropSetting.module.css'; // plasmic-import: 3oECv05maA/css

import Icon11Icon from './icons/PlasmicIcon__Icon11'; // plasmic-import: 92-GLmRB2L/icon

export type PlasmicPropSetting__VariantMembers = {};

export type PlasmicPropSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicPropSetting__VariantsArgs;
export const PlasmicPropSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicPropSetting__ArgsType = {};
type ArgPropType = keyof PlasmicPropSetting__ArgsType;
export const PlasmicPropSetting__ArgProps = new Array<ArgPropType>();

export type PlasmicPropSetting__OverridesType = {
  root?: p.Flex<'div'>;
  header?: p.Flex<typeof Header>;
  test?: p.Flex<'div'>;
  remove?: p.Flex<typeof IconButton>;
  svg?: p.Flex<'svg'>;
  itemName?: p.Flex<typeof Item>;
  itemType?: p.Flex<typeof Item>;
  options?: p.Flex<typeof Group>;
  effects?: p.Flex<typeof Group>;
};

export interface DefaultPropSettingProps {
  className?: string;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPropSetting__RenderFunc(props: {
  variants: PlasmicPropSetting__VariantsArgs;
  args: PlasmicPropSetting__ArgsType;
  overrides: PlasmicPropSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'options.groupName',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 'Options' as const,
      },

      {
        path: 'itemName.options',
        type: 'private',
        variableType: 'array',
        initFunc: ({ $props, $state, $queries, $ctx }) => ['Option 1', 'Option 2', 'Option 3'],
      },

      {
        path: 'itemName.isOn',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },

      {
        path: 'itemType.options',
        type: 'private',
        variableType: 'array',
        initFunc: ({ $props, $state, $queries, $ctx }) => ['Option 1', 'Option 2', 'Option 3'],
      },

      {
        path: 'itemType.isOn',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
      },

      {
        path: 'effects.groupName',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 'Layer & Prop to effect' as const,
      },

      {
        path: 'itemName.inputValue',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,
      },

      {
        path: 'itemType.inputValue',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,
      },

      {
        path: 'itemName.typeSelect',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,
      },

      {
        path: 'itemType.typeSelect',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__pnLt8)} id={'ContentWrap' as const}>
              {true ? (
                <Header
                  data-plasmic-name={'header'}
                  data-plasmic-override={overrides.header}
                  className={classNames('__wab_instance', sty.header)}
                />
              ) : null}
              {true ? (
                <p.Stack as={'div'} hasGap={true} className={classNames(projectcss.all, sty.freeBox__xcx9T)}>
                  {true ? (
                    <div className={classNames(projectcss.all, sty.freeBox__bnLrf)}>
                      {true ? (
                        <div className={classNames(projectcss.all, sty.freeBox__wbVj3)}>
                          <div
                            data-plasmic-name={'test'}
                            data-plasmic-override={overrides.test}
                            className={classNames(projectcss.all, projectcss.__wab_text, sty.test)}
                          >
                            {'Basic Info'}
                          </div>
                          <IconButton
                            data-plasmic-name={'remove'}
                            data-plasmic-override={overrides.remove}
                            className={classNames('__wab_instance', sty.remove)}
                          >
                            <Icon11Icon
                              data-plasmic-name={'svg'}
                              data-plasmic-override={overrides.svg}
                              className={classNames(projectcss.all, sty.svg)}
                              role={'img'}
                            />
                          </IconButton>
                        </div>
                      ) : null}
                      {true ? (
                        <p.Stack as={'div'} hasGap={true} className={classNames(projectcss.all, sty.freeBox__j9OXp)}>
                          <Item
                            data-plasmic-name={'itemName'}
                            data-plasmic-override={overrides.itemName}
                            className={classNames('__wab_instance', sty.itemName)}
                            inputValue={p.generateStateValueProp($state, ['itemName', 'inputValue'])}
                            isOn={p.generateStateValueProp($state, ['itemName', 'isOn'])}
                            name={'Name' as const}
                            onInputValueChange={p.generateStateOnChangeProp($state, ['itemName', 'inputValue'])}
                            onIsOnChange={p.generateStateOnChangeProp($state, ['itemName', 'isOn'])}
                            onOptionsChange={p.generateStateOnChangeProp($state, ['itemName', 'options'])}
                            onTypeSelectChange={p.generateStateOnChangeProp($state, ['itemName', 'typeSelect'])}
                            options={p.generateStateValueProp($state, ['itemName', 'options'])}
                            type={'text' as const}
                            typeSelect={p.generateStateValueProp($state, ['itemName', 'typeSelect'])}
                          />

                          <Item
                            data-plasmic-name={'itemType'}
                            data-plasmic-override={overrides.itemType}
                            className={classNames('__wab_instance', sty.itemType)}
                            inputValue={p.generateStateValueProp($state, ['itemType', 'inputValue'])}
                            isOn={p.generateStateValueProp($state, ['itemType', 'isOn'])}
                            name={'Type' as const}
                            onInputValueChange={p.generateStateOnChangeProp($state, ['itemType', 'inputValue'])}
                            onIsOnChange={p.generateStateOnChangeProp($state, ['itemType', 'isOn'])}
                            onOptionsChange={p.generateStateOnChangeProp($state, ['itemType', 'options'])}
                            onTypeSelectChange={p.generateStateOnChangeProp($state, ['itemType', 'typeSelect'])}
                            options={p.generateStateValueProp($state, ['itemType', 'options'])}
                            type={'select' as const}
                            typeSelect={p.generateStateValueProp($state, ['itemType', 'typeSelect'])}
                          />
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null}
                  <Group
                    data-plasmic-name={'options'}
                    data-plasmic-override={overrides.options}
                    className={classNames('__wab_instance', sty.options)}
                    groupName={p.generateStateValueProp($state, ['options', 'groupName'])}
                    onGroupNameChange={p.generateStateOnChangeProp($state, ['options', 'groupName'])}
                  />

                  <Group
                    data-plasmic-name={'effects'}
                    data-plasmic-override={overrides.effects}
                    className={classNames('__wab_instance', sty.effects)}
                    groupName={p.generateStateValueProp($state, ['effects', 'groupName'])}
                    onGroupNameChange={p.generateStateOnChangeProp($state, ['effects', 'groupName'])}
                  />
                </p.Stack>
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'header', 'test', 'remove', 'svg', 'itemName', 'itemType', 'options', 'effects'],
  header: ['header'],
  test: ['test'],
  remove: ['remove', 'svg'],
  svg: ['svg'],
  itemName: ['itemName'],
  itemType: ['itemType'],
  options: ['options'],
  effects: ['effects'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  header: typeof Header;
  test: 'div';
  remove: typeof IconButton;
  svg: 'svg';
  itemName: typeof Item;
  itemType: typeof Item;
  options: typeof Group;
  effects: typeof Group;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicPropSetting__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPropSetting__VariantsArgs;
  args?: PlasmicPropSetting__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicPropSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPropSetting__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPropSetting__ArgProps,
          internalVariantPropNames: PlasmicPropSetting__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicPropSetting__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicPropSetting';
  } else {
    func.displayName = `PlasmicPropSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicPropSetting = Object.assign(
  // Top-level PlasmicPropSetting renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent('header'),
    test: makeNodeComponent('test'),
    remove: makeNodeComponent('remove'),
    svg: makeNodeComponent('svg'),
    itemName: makeNodeComponent('itemName'),
    itemType: makeNodeComponent('itemType'),
    options: makeNodeComponent('options'),
    effects: makeNodeComponent('effects'),

    // Metadata about props expected for PlasmicPropSetting
    internalVariantProps: PlasmicPropSetting__VariantProps,
    internalArgProps: PlasmicPropSetting__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicPropSetting;
/* prettier-ignore-end */
