// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kh4DHzfPKxHW3t3zk2aoXn
// Component: bRF9tCxc_y

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import TextInput from '../../TextInput'; // plasmic-import: eUvFTpTI4dJJVg/component
import IconButton from '../../IconButton'; // plasmic-import: 0Jteo_49Jd/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_synthetic_prop_creator.module.css'; // plasmic-import: kh4DHzfPKxHW3t3zk2aoXn/projectcss
import sty from './PlasmicOptionItem.module.css'; // plasmic-import: bRF9tCxc_y/css

import SearchsvgIcon from './icons/PlasmicIcon__Searchsvg'; // plasmic-import: 9q4QdB4CwpL2Es/icon
import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: d9XEwTAXFRidi3/icon
import Icon9Icon from './icons/PlasmicIcon__Icon9'; // plasmic-import: -vmCDH9BLC/icon

export type PlasmicOptionItem__VariantMembers = {};

export type PlasmicOptionItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicOptionItem__VariantsArgs;
export const PlasmicOptionItem__VariantProps = new Array<VariantPropType>();

export type PlasmicOptionItem__ArgsType = {};
type ArgPropType = keyof PlasmicOptionItem__ArgsType;
export const PlasmicOptionItem__ArgProps = new Array<ArgPropType>();

export type PlasmicOptionItem__OverridesType = {
  root?: p.Flex<'div'>;
  optinoName?: p.Flex<typeof TextInput>;
  optionValue?: p.Flex<typeof TextInput>;
  _delete?: p.Flex<typeof IconButton>;
  svg?: p.Flex<'svg'>;
};

export interface DefaultOptionItemProps {
  className?: string;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicOptionItem__RenderFunc(props: {
  variants: PlasmicOptionItem__VariantsArgs;
  args: PlasmicOptionItem__ArgsType;
  overrides: PlasmicOptionItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'optinoName.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,
      },

      {
        path: 'optionValue.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => '' as const,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <TextInput
        data-plasmic-name={'optinoName'}
        data-plasmic-override={overrides.optinoName}
        className={classNames('__wab_instance', sty.optinoName)}
        onChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ['optinoName', 'value'])(((e) => e.target?.value).apply(null, eventArgs));
        }}
        placeholder={'name' as const}
        value={p.generateStateValueProp($state, ['optinoName', 'value']) ?? ''}
      />

      <TextInput
        data-plasmic-name={'optionValue'}
        data-plasmic-override={overrides.optionValue}
        className={classNames('__wab_instance', sty.optionValue)}
        onChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ['optionValue', 'value'])(
            ((e) => e.target?.value).apply(null, eventArgs)
          );
        }}
        placeholder={'value' as const}
        value={p.generateStateValueProp($state, ['optionValue', 'value']) ?? ''}
      />

      <IconButton
        data-plasmic-name={'_delete'}
        data-plasmic-override={overrides._delete}
        className={classNames('__wab_instance', sty._delete)}
      >
        <Icon9Icon
          data-plasmic-name={'svg'}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={'img'}
        />
      </IconButton>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'optinoName', 'optionValue', '_delete', 'svg'],
  optinoName: ['optinoName'],
  optionValue: ['optionValue'],
  _delete: ['_delete', 'svg'],
  svg: ['svg'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  optinoName: typeof TextInput;
  optionValue: typeof TextInput;
  _delete: typeof IconButton;
  svg: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicOptionItem__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicOptionItem__VariantsArgs;
  args?: PlasmicOptionItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicOptionItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicOptionItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOptionItem__ArgProps,
          internalVariantPropNames: PlasmicOptionItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicOptionItem__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicOptionItem';
  } else {
    func.displayName = `PlasmicOptionItem.${nodeName}`;
  }
  return func;
}

export const PlasmicOptionItem = Object.assign(
  // Top-level PlasmicOptionItem renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    optinoName: makeNodeComponent('optinoName'),
    optionValue: makeNodeComponent('optionValue'),
    _delete: makeNodeComponent('_delete'),
    svg: makeNodeComponent('svg'),

    // Metadata about props expected for PlasmicOptionItem
    internalVariantProps: PlasmicOptionItem__VariantProps,
    internalArgProps: PlasmicOptionItem__ArgProps,
  }
);

export default PlasmicOptionItem;
/* prettier-ignore-end */
