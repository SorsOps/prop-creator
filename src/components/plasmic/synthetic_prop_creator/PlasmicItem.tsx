// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kh4DHzfPKxHW3t3zk2aoXn
// Component: 9gVbaqOElK63Ae

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import Select from '../../Select'; // plasmic-import: R93O6qtnoGgKV/component
import Select__Option from '../../Select__Option'; // plasmic-import: wfKz4k2V_x8Tz/component
import Switch from '../../Switch'; // plasmic-import: swF-mIACj50Mj0/component
import TextInput from '../../TextInput'; // plasmic-import: eUvFTpTI4dJJVg/component
import IconButton from '../../IconButton'; // plasmic-import: 0Jteo_49Jd/component

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_synthetic_prop_creator.module.css'; // plasmic-import: kh4DHzfPKxHW3t3zk2aoXn/projectcss
import sty from './PlasmicItem.module.css'; // plasmic-import: 9gVbaqOElK63Ae/css

import SearchsvgIcon from './icons/PlasmicIcon__Searchsvg'; // plasmic-import: 9q4QdB4CwpL2Es/icon
import ChecksvgIcon from './icons/PlasmicIcon__Checksvg'; // plasmic-import: d9XEwTAXFRidi3/icon
import Icon8Icon from './icons/PlasmicIcon__Icon8'; // plasmic-import: BVQ9O7lzCF/icon

export type PlasmicItem__VariantMembers = {
  type: 'select' | 'text' | 'numeric' | 'boolean';
  hasButton: 'hasButton';
};

export type PlasmicItem__VariantsArgs = {
  type?: SingleChoiceArg<'select' | 'text' | 'numeric' | 'boolean'>;
  hasButton?: SingleBooleanChoiceArg<'hasButton'>;
};

type VariantPropType = keyof PlasmicItem__VariantsArgs;
export const PlasmicItem__VariantProps = new Array<VariantPropType>('type', 'hasButton');

export type PlasmicItem__ArgsType = {
  name?: string;
  options?: any;
  onOptionsChange?: (val: any) => void;
  isOn?: boolean;
  onIsOnChange?: (val: boolean) => void;
  id?: string;
  inputValue?: string;
  onInputValueChange?: (val: string) => void;
  typeSelect?: string;
  onTypeSelectChange?: (val: string) => void;
};

type ArgPropType = keyof PlasmicItem__ArgsType;
export const PlasmicItem__ArgProps = new Array<ArgPropType>(
  'name',
  'options',
  'onOptionsChange',
  'isOn',
  'onIsOnChange',
  'id',
  'inputValue',
  'onInputValueChange',
  'typeSelect',
  'onTypeSelectChange'
);

export type PlasmicItem__OverridesType = {
  root?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  text?: p.Flex<'div'>;
  select?: p.Flex<typeof Select>;
  option?: p.Flex<typeof Select__Option>;
  toggle?: p.Flex<typeof Switch>;
  textInput?: p.Flex<typeof TextInput>;
  iconButton?: p.Flex<typeof IconButton>;
  svg?: p.Flex<'svg'>;
};

export interface DefaultItemProps {
  name?: string;
  options?: any;
  onOptionsChange?: (val: any) => void;
  isOn?: boolean;
  onIsOnChange?: (val: boolean) => void;
  id?: string;
  inputValue?: string;
  onInputValueChange?: (val: string) => void;
  typeSelect?: string;
  onTypeSelectChange?: (val: string) => void;
  type?: SingleChoiceArg<'select' | 'text' | 'numeric' | 'boolean'>;
  hasButton?: SingleBooleanChoiceArg<'hasButton'>;
  className?: string;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicItem__RenderFunc(props: {
  variants: PlasmicItem__VariantsArgs;
  args: PlasmicItem__ArgsType;
  overrides: PlasmicItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: 'name' as const,
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'select.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.typeSelect;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })(),
      },

      {
        path: 'options',
        type: 'writable',
        variableType: 'array',

        valueProp: 'options',
        onChangeProp: 'onOptionsChange',
      },
      {
        path: 'type',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type,
      },

      {
        path: 'textInput.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, 'type', 'text')
            ? (() => {
                try {
                  return $state.inputValue;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ('' as const),
      },

      {
        path: 'toggle.isOn',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.isOn;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })(),
      },

      {
        path: 'isOn',
        type: 'writable',
        variableType: 'boolean',

        valueProp: 'isOn',
        onChangeProp: 'onIsOnChange',
      },
      {
        path: 'hasButton',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasButton,
      },

      {
        path: 'inputValue',
        type: 'writable',
        variableType: 'text',

        valueProp: 'inputValue',
        onChangeProp: 'onInputValueChange',
      },
      {
        path: 'typeSelect',
        type: 'writable',
        variableType: 'text',

        valueProp: 'typeSelect',
        onChangeProp: 'onTypeSelectChange',
      },
      {
        path: 'select.open',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const [isRootHover, triggerRootHoverProps] = useTrigger('useHover', {});
  const triggers = {
    hover_root: isRootHover,
  };

  return (
    true ? (
      <div
        data-plasmic-name={'root'}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.roothasButton]: hasVariant($state, 'hasButton', 'hasButton'),
            [sty.roottype_boolean]: hasVariant($state, 'type', 'boolean'),
            [sty.roottype_numeric]: hasVariant($state, 'type', 'numeric'),
            [sty.roottype_select]: hasVariant($state, 'type', 'select'),
            [sty.roottype_text]: hasVariant($state, 'type', 'text'),
          }
        )}
        data-plasmic-trigger-props={[triggerRootHoverProps]}
      >
        {true ? (
          <div
            data-plasmic-name={'freeBox'}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={'text'}
              data-plasmic-override={overrides.text}
              className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
                [sty.texthasButton]: hasVariant($state, 'hasButton', 'hasButton'),
                [sty.texttype_numeric]: hasVariant($state, 'type', 'numeric'),
                [sty.texttype_select]: hasVariant($state, 'type', 'select'),
                [sty.texttype_text]: hasVariant($state, 'type', 'text'),
              })}
            >
              {(() => {
                try {
                  return $props.name;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return 'Ratio:';
                  }
                  throw e;
                }
              })()}
            </div>
          </div>
        ) : null}
        {(
          hasVariant($state, 'type', 'boolean')
            ? false
            : hasVariant($state, 'type', 'numeric')
            ? false
            : hasVariant($state, 'type', 'text')
            ? false
            : true
        ) ? (
          <Select
            data-plasmic-name={'select'}
            data-plasmic-override={overrides.select}
            className={classNames('__wab_instance', sty.select, {
              [sty.selecthasButton]: hasVariant($state, 'hasButton', 'hasButton'),
              [sty.selecttype_boolean]: hasVariant($state, 'type', 'boolean'),
              [sty.selecttype_numeric]: hasVariant($state, 'type', 'numeric'),
              [sty.selecttype_select]: hasVariant($state, 'type', 'select'),
              [sty.selecttype_text]: hasVariant($state, 'type', 'text'),
            })}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                p.generateStateOnChangeProp($state, ['select', 'value'])(eventArgs[0]);
              }).apply(null, eventArgs);
              (async (value) => {
                const $steps = {};
                $steps['updateTypeSelect'] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'ZNPwWWbAi',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'variable',
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ['typeSelect'],
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'ZNPwWWbAi',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'operation',
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'ZNPwWWbAi',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'value',
                          },
                          () => $state.select.value
                        ),
                      };

                      return __wrapUserFunction(
                        {
                          type: 'InteractionLoc',
                          actionName: 'updateVariable',
                          interactionUuid: 'ZNPwWWbAi',
                          componentUuid: '9gVbaqOElK63Ae',
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps['updateTypeSelect'] === 'object' &&
                  typeof $steps['updateTypeSelect'].then === 'function'
                ) {
                  $steps['updateTypeSelect'] = await __wrapUserPromise(
                    {
                      type: 'InteractionLoc',
                      actionName: 'updateVariable',
                      interactionUuid: 'ZNPwWWbAi',
                      componentUuid: '9gVbaqOElK63Ae',
                    },
                    $steps['updateTypeSelect']
                  );
                }
              }).apply(null, eventArgs);
            }}
            onOpenChange={(...eventArgs) => {
              p.generateStateOnChangeProp($state, ['select', 'open'])(eventArgs[0]);
            }}
            placeholder={'Select…'}
            value={p.generateStateValueProp($state, ['select', 'value'])}
          >
            {(
              (() => {
                try {
                  return $state.options;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return [];
                  }
                  throw e;
                }
              })() ?? []
            ).map((c, i) => (
              <Select__Option
                data-plasmic-name={'option'}
                data-plasmic-override={overrides.option}
                className={classNames('__wab_instance', sty.option)}
                key={i}
                textValue={(() => {
                  try {
                    return $state.options[i];
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                value={(() => {
                  try {
                    return $state.options[i];
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return '';
                    }
                    throw e;
                  }
                })()}
              >
                {(() => {
                  try {
                    return $state.options[i];
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return 'Option 1';
                    }
                    throw e;
                  }
                })()}
              </Select__Option>
            ))}
          </Select>
        ) : null}
        {(hasVariant($state, 'type', 'boolean') ? true : true) ? (
          <Switch
            data-plasmic-name={'toggle'}
            data-plasmic-override={overrides.toggle}
            className={classNames('__wab_instance', sty.toggle, {
              [sty.toggletype_boolean]: hasVariant($state, 'type', 'boolean'),
            })}
            isOn={p.generateStateValueProp($state, ['toggle', 'isOn'])}
            on={$state.isOn}
            onIsOnChange={async (...eventArgs) => {
              p.generateStateOnChangeProp($state, ['toggle', 'isOn']).apply(null, eventArgs);
              (async (val) => {
                const $steps = {};
                $steps['updateSelectValue'] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'I8TJMGMoG',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'variable',
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ['select', 'value'],
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'I8TJMGMoG',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'operation',
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'I8TJMGMoG',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'value',
                          },
                          () => val
                        ),
                      };

                      return __wrapUserFunction(
                        {
                          type: 'InteractionLoc',
                          actionName: 'updateVariable',
                          interactionUuid: 'I8TJMGMoG',
                          componentUuid: '9gVbaqOElK63Ae',
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps['updateSelectValue'] === 'object' &&
                  typeof $steps['updateSelectValue'].then === 'function'
                ) {
                  $steps['updateSelectValue'] = await __wrapUserPromise(
                    {
                      type: 'InteractionLoc',
                      actionName: 'updateVariable',
                      interactionUuid: 'I8TJMGMoG',
                      componentUuid: '9gVbaqOElK63Ae',
                    },
                    $steps['updateSelectValue']
                  );
                }
              }).apply(null, eventArgs);
            }}
          />
        ) : null}
        {(hasVariant($state, 'type', 'numeric') ? true : hasVariant($state, 'type', 'text') ? true : false) ? (
          <TextInput
            data-plasmic-name={'textInput'}
            data-plasmic-override={overrides.textInput}
            className={classNames('__wab_instance', sty.textInput, {
              [sty.textInputtype_boolean]: hasVariant($state, 'type', 'boolean'),
              [sty.textInputtype_numeric]: hasVariant($state, 'type', 'numeric'),
              [sty.textInputtype_text]: hasVariant($state, 'type', 'text'),
            })}
            numeric={hasVariant($state, 'type', 'numeric') ? true : undefined}
            onChange={async (...eventArgs) => {
              ((...eventArgs) => {
                p.generateStateOnChangeProp($state, ['textInput', 'value'])(
                  ((e) => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);
              (async (event) => {
                const $steps = {};
                $steps['updateInputValue'] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'PATGIgTtV',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'variable',
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ['inputValue'],
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'PATGIgTtV',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'operation',
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: 'InteractionArgLoc',
                            actionName: 'updateVariable',
                            interactionUuid: 'PATGIgTtV',
                            componentUuid: '9gVbaqOElK63Ae',
                            argName: 'value',
                          },
                          () => $state.textInput.value
                        ),
                      };

                      return __wrapUserFunction(
                        {
                          type: 'InteractionLoc',
                          actionName: 'updateVariable',
                          interactionUuid: 'PATGIgTtV',
                          componentUuid: '9gVbaqOElK63Ae',
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps['updateInputValue'] === 'object' &&
                  typeof $steps['updateInputValue'].then === 'function'
                ) {
                  $steps['updateInputValue'] = await __wrapUserPromise(
                    {
                      type: 'InteractionLoc',
                      actionName: 'updateVariable',
                      interactionUuid: 'PATGIgTtV',
                      componentUuid: '9gVbaqOElK63Ae',
                    },
                    $steps['updateInputValue']
                  );
                }
              }).apply(null, eventArgs);
            }}
            value={p.generateStateValueProp($state, ['textInput', 'value']) ?? ''}
          />
        ) : null}
        {(
          hasVariant($state, 'hasButton', 'hasButton') && triggers.hover_root
            ? true
            : hasVariant($state, 'hasButton', 'hasButton')
            ? true
            : false
        ) ? (
          <IconButton
            data-plasmic-name={'iconButton'}
            data-plasmic-override={overrides.iconButton}
            className={classNames('__wab_instance', sty.iconButton, {
              [sty.iconButtonhasButton]: hasVariant($state, 'hasButton', 'hasButton'),
              [sty.iconButtontype_select]: hasVariant($state, 'type', 'select'),
            })}
          >
            <Icon8Icon
              data-plasmic-name={'svg'}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={'img'}
            />
          </IconButton>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'freeBox', 'text', 'select', 'option', 'toggle', 'textInput', 'iconButton', 'svg'],
  freeBox: ['freeBox', 'text'],
  text: ['text'],
  select: ['select', 'option'],
  option: ['option'],
  toggle: ['toggle'],
  textInput: ['textInput'],
  iconButton: ['iconButton', 'svg'],
  svg: ['svg'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
  freeBox: 'div';
  text: 'div';
  select: typeof Select;
  option: typeof Select__Option;
  toggle: typeof Switch;
  textInput: typeof TextInput;
  iconButton: typeof IconButton;
  svg: 'svg';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicItem__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicItem__VariantsArgs;
  args?: PlasmicItem__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicItem__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicItem__ArgProps,
          internalVariantPropNames: PlasmicItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicItem__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicItem';
  } else {
    func.displayName = `PlasmicItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItem = Object.assign(
  // Top-level PlasmicItem renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent('freeBox'),
    text: makeNodeComponent('text'),
    select: makeNodeComponent('select'),
    option: makeNodeComponent('option'),
    toggle: makeNodeComponent('toggle'),
    textInput: makeNodeComponent('textInput'),
    iconButton: makeNodeComponent('iconButton'),
    svg: makeNodeComponent('svg'),

    // Metadata about props expected for PlasmicItem
    internalVariantProps: PlasmicItem__VariantProps,
    internalArgProps: PlasmicItem__ArgProps,
  }
);

export default PlasmicItem;
/* prettier-ignore-end */
