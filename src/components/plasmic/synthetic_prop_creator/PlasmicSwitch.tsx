// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kh4DHzfPKxHW3t3zk2aoXn
// Component: swF-mIACj50Mj0

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import projectcss from './plasmic_synthetic_prop_creator.module.css'; // plasmic-import: kh4DHzfPKxHW3t3zk2aoXn/projectcss
import sty from './PlasmicSwitch.module.css'; // plasmic-import: swF-mIACj50Mj0/css

export type PlasmicSwitch__VariantMembers = {
  on: 'on';
};

export type PlasmicSwitch__VariantsArgs = {
  on?: SingleBooleanChoiceArg<'on'>;
};

type VariantPropType = keyof PlasmicSwitch__VariantsArgs;
export const PlasmicSwitch__VariantProps = new Array<VariantPropType>('on');

export type PlasmicSwitch__ArgsType = {
  isOn?: boolean;
  onIsOnChange?: (val: boolean) => void;
};

type ArgPropType = keyof PlasmicSwitch__ArgsType;
export const PlasmicSwitch__ArgProps = new Array<ArgPropType>('isOn', 'onIsOnChange');

export type PlasmicSwitch__OverridesType = {
  root?: p.Flex<'div'>;
};

export interface DefaultSwitchProps {
  isOn?: boolean;
  onIsOnChange?: (val: boolean) => void;
  on?: SingleBooleanChoiceArg<'on'>;
  className?: string;
}

const __wrapUserFunction = globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSwitch__RenderFunc(props: {
  variants: PlasmicSwitch__VariantsArgs;
  args: PlasmicSwitch__ArgsType;
  overrides: PlasmicSwitch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: 'on',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.on,
      },

      {
        path: 'isOn',
        type: 'writable',
        variableType: 'boolean',

        valueProp: 'isOn',
        onChangeProp: 'onIsOnChange',
      },
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rooton]: hasVariant($state, 'on', 'on') }
      )}
      onClick={async (event) => {
        const $steps = {};
        $steps['updateIsOn'] = true
          ? (() => {
              const actionArgs = {
                variable: __wrapUserFunction(
                  {
                    type: 'InteractionArgLoc',
                    actionName: 'updateVariable',
                    interactionUuid: '-ooOaoLFYgXV7v',
                    componentUuid: 'swF-mIACj50Mj0',
                    argName: 'variable',
                  },
                  () => ({
                    objRoot: $state,
                    variablePath: ['isOn'],
                  })
                ),
                operation: __wrapUserFunction(
                  {
                    type: 'InteractionArgLoc',
                    actionName: 'updateVariable',
                    interactionUuid: '-ooOaoLFYgXV7v',
                    componentUuid: 'swF-mIACj50Mj0',
                    argName: 'operation',
                  },
                  () => 4
                ),
              };
              return __wrapUserFunction(
                {
                  type: 'InteractionLoc',
                  actionName: 'updateVariable',
                  interactionUuid: '-ooOaoLFYgXV7v',
                  componentUuid: 'swF-mIACj50Mj0',
                },
                () =>
                  (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = p.get(objRoot, variablePath);
                    p.set(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]),
                actionArgs
              );
            })()
          : undefined;
        if (typeof $steps['updateIsOn'] === 'object' && typeof $steps['updateIsOn'].then === 'function') {
          $steps['updateIsOn'] = await __wrapUserPromise(
            {
              type: 'InteractionLoc',
              actionName: 'updateVariable',
              interactionUuid: '-ooOaoLFYgXV7v',
              componentUuid: 'swF-mIACj50Mj0',
            },
            $steps['updateIsOn']
          );
        }
        $steps['updateOn'] = true
          ? (() => {
              const actionArgs = {
                vgroup: __wrapUserFunction(
                  {
                    type: 'InteractionArgLoc',
                    actionName: 'updateVariant',
                    interactionUuid: 'a_TX0Kg1YroxYH',
                    componentUuid: 'swF-mIACj50Mj0',
                    argName: 'vgroup',
                  },
                  () => 'on'
                ),
                operation: __wrapUserFunction(
                  {
                    type: 'InteractionArgLoc',
                    actionName: 'updateVariant',
                    interactionUuid: 'a_TX0Kg1YroxYH',
                    componentUuid: 'swF-mIACj50Mj0',
                    argName: 'operation',
                  },
                  () => 2
                ),
                value: __wrapUserFunction(
                  {
                    type: 'InteractionArgLoc',
                    actionName: 'updateVariant',
                    interactionUuid: 'a_TX0Kg1YroxYH',
                    componentUuid: 'swF-mIACj50Mj0',
                    argName: 'value',
                  },
                  () => 'on'
                ),
              };
              return __wrapUserFunction(
                {
                  type: 'InteractionLoc',
                  actionName: 'updateVariant',
                  interactionUuid: 'a_TX0Kg1YroxYH',
                  componentUuid: 'swF-mIACj50Mj0',
                },
                () =>
                  (({ vgroup, value }) => {
                    if (typeof value === 'string') {
                      value = [value];
                    }

                    const oldValue = p.get($state, vgroup);
                    p.set($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]),
                actionArgs
              );
            })()
          : undefined;
        if (typeof $steps['updateOn'] === 'object' && typeof $steps['updateOn'].then === 'function') {
          $steps['updateOn'] = await __wrapUserPromise(
            {
              type: 'InteractionLoc',
              actionName: 'updateVariant',
              interactionUuid: 'a_TX0Kg1YroxYH',
              componentUuid: 'swF-mIACj50Mj0',
            },
            $steps['updateOn']
          );
        }
      }}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__s8O6A, {
          [sty.freeBoxon__s8O6ASemX9]: hasVariant($state, 'on', 'on'),
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__mLj7O, {
            [sty.freeBoxon__mLj7OSemX9]: hasVariant($state, 'on', 'on'),
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicSwitch__OverridesType, DescendantsType<T>>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSwitch__VariantsArgs;
  args?: PlasmicSwitch__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSwitch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSwitch__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType> &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(props: T & StrictProps<T, PropsType>) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSwitch__ArgProps,
          internalVariantPropNames: PlasmicSwitch__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicSwitch__RenderFunc({ variants, args, overrides, forNode: nodeName });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSwitch';
  } else {
    func.displayName = `PlasmicSwitch.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitch = Object.assign(
  // Top-level PlasmicSwitch renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSwitch
    internalVariantProps: PlasmicSwitch__VariantProps,
    internalArgProps: PlasmicSwitch__ArgProps,
  }
);

export default PlasmicSwitch;
/* prettier-ignore-end */
